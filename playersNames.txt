Battery: Mark, Alex, James, Bright, Leroy
IF: Luke, Eric, Oscar, Frank, Aaron
OF: Nathan, Brian, Jacob, Michael, Daniel

["Novice", "Amateur", "Draftee", "Minor-leaguer", "Major-leaguer", "Coach", "Analyst"]
["Rusty", "Silver", "Golden", "Emerald", "Prismatic", "Shimmering TOP 100"]
0-200       200-400 400-600   600-800   800-1000    1000+ and top 100

and also add color flairs to big numbers, loading spinners, tutorial, acquire players, notUserpage, manage players page, add friends, levelUpTickets

import Head from "next/head";
import clientPromise from "../lib/mongodb";
import { getSession, useSession } from "next-auth/react";
import {useEffect} from "react"

export default function Game({ isConnected }) {

  return (
    <div className="container">
      <Head>
        <title>BSBLR - Game</title>
      </Head>

      <h1 className="title">Login to BSBLR</h1>

      <p className="description">
        Get started by editing <code>pages/index.js</code>
      </p>
    </div>
  );
}

export async function getServerSideProps(context) {
    const session = await getSession({ req: context.req });
    if (!session) {
      return {
        redirect: {
          destination: "/",
          permanent: false,
        },
      };
    }
  try {
    await clientPromise;
    // `await clientPromise` will use the default database passed in the MONGODB_URI
    // However you can use another database (e.g. myDatabase) by replacing the `await clientPromise` with the following code:
    //
    // `const client = await clientPromise`
    // `const db = client.db("myDatabase")`
    //
    // Then you can execute queries against your database like so:
    // db.find({}) or any of the MongoDB Node Driver commands

    return {
      props: { isConnected: true },
    };
  } catch (e) {
    console.error(e);
    return {
      props: { isConnected: false },
    };
  }
}
